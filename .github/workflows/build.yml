name: Docker CI with Gradle

# Defines the workflow trigger
on:
  # We trigger the workflow on a push
  push:
    # Specifically to the 'main' branch
    branches: [ "main" ]

# Permissions the workflow has to the repository itself
# In this case we aren't making changes, we just need read.
permissions:
  contents: read

# Jobs are a set of steps, and there can be multiple jobs in a workflow.
# In this case, we have a job with steps needed to build the application,
# and then a job to build and push the Docker image.
jobs:
  # Build the application
  build:
    # The OS to run the job on. Linux is the cheapest, and then Windows and macOS. You can also pick a higher number of CPU cores
    runs-on: ubuntu-latest
    steps:
      # Pull down the code from the repo
      - uses: actions/checkout@v3
      # Get a JDK installed
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11
      # Get ready for Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      # Run the command to build the application
      - name: Execute Gradle build
        run: |
          chmod +x ./gradlew
          ./gradlew build
      # Whatever the jar's name is, rename it to app.jar
      - name: Copy Jar file
        run: mv build/libs/$(ls build/libs) app.jar
      # Make the jar accessible to the next job
      - uses: actions/upload-artifact@master
        with:
          name: jar-file
          path: app.jar

  # Build and push the Docker image
  build-image:
    # Again using Ubuntu, no need for Windows or macOS
    runs-on: ubuntu-latest
    # We need the build job to complete before we make an image, jobs run in parallel by default.
    needs: build
    steps:
      # I don't think we need to check out the repo again
#      - uses: actions/checkout@v3
      # Get the docker CLI setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Log into Docker Hub with the credentials we added to the repo (we don't want to hard code these)
      # The ${{ }} syntax defines an expression. GitHub evaluates these expressions when the Action runs,
      # in this case we're grabbing the values set in 'secrets'.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}      
      # Building and pushing the image
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          # context: . because we are working in the current directory
          context: .
          push: true
          # Pushing this to the wsu-gh-actions-demo repo in the sakahle project on DockerHub
          # uniquely tagged with the current commit hash.
          tags: sakahle/wsu-gh-actions-demo:${{ github.sha }}
